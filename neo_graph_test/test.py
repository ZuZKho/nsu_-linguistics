#!/usr/bin/env python3

import requests
import json
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://127.0.0.1:8000/api"

class Colors:
    GREEN = '\033[0;32m'
    BLUE = '\033[0;34m'
    YELLOW = '\033[1;33m'
    RED = '\033[0;31m'
    NC = '\033[0m'

def print_color(color, message):
    print(f"{color}{message}{Colors.NC}")

def test_endpoint(method, url, data=None, expected_status=200):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        if method == "GET":
            response = requests.get(url)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        elif method == "DELETE":
            response = requests.delete(url)
        
        success = response.status_code == expected_status
        color = Colors.GREEN if success else Colors.RED
        status_icon = "‚úÖ" if success else "‚ùå"
        
        print_color(color, f"{status_icon} {method} {url} - Status: {response.status_code} (expected: {expected_status})")
        
        if response.status_code in [200, 201]:
            return response.json(), True
        else:
            print_color(Colors.RED, f"   Response: {response.text}")
            return None, False
            
    except Exception as e:
        print_color(Colors.RED, f"‚ùå Exception: {e}")
        return None, False

def main():
    print_color(Colors.BLUE, "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
    print("=" * 60)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö URI
    uris = {}
    
    # 1. –¢–ï–°–¢–ò–†–£–ï–ú ONTOLOGY ENDPOINTS
    print_color(Colors.BLUE, "\n1. ONTOLOGY ENDPOINTS:")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–Ω—Ç–æ–ª–æ–≥–∏—é
    response, success = test_endpoint("GET", f"{BASE_URL}/ontology/")
    if success and response:
        signatures_count = len(response.get('signatures', []))
        objects_count = len(response.get('objects', []))
        print_color(Colors.GREEN, f"   üìä –°–∏–≥–Ω–∞—Ç—É—Ä: {signatures_count}, –û–±—ä–µ–∫—Ç–æ–≤: {objects_count}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã
    response, success = test_endpoint("GET", f"{BASE_URL}/ontology/parent-classes/")
    if success and response:
        classes_count = len(response.get('classes', []))
        print_color(Colors.GREEN, f"   üèóÔ∏è  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤: {classes_count}")
    
    # 2. –°–û–ó–î–ê–ï–ú –ö–õ–ê–°–°–´
    print_color(Colors.BLUE, "\n2. –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–°–°–û–í:")
    
    classes_to_create = [
        {"title": "–ñ–∏–≤–æ—Ç–Ω–æ–µ", "description": "–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"},
        {"title": "–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ", "description": "–ö–ª–∞—Å—Å –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏—Ö"},
        {"title": "–ü—Ç–∏—Ü–∞", "description": "–ö–ª–∞—Å—Å –ø—Ç–∏—Ü"},
        {"title": "–ß–µ–ª–æ–≤–µ–∫", "description": "–ö–ª–∞—Å—Å –ª—é–¥–µ–π"}, 
        {"title": "–°–æ–±–∞–∫–∞", "description": "–ö–ª–∞—Å—Å —Å–æ–±–∞–∫"},
        {"title": "–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è", "description": "–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"}
    ]
    
    for class_data in classes_to_create:
        response, success = test_endpoint("POST", f"{BASE_URL}/classes/", class_data, 201)
        if success and response and 'uri' in response:
            key = class_data['title'].upper().replace(' ', '_')
            uris[key] = response['uri']
            print_color(Colors.GREEN, f"   üÜî {key}: {response['uri']}")
    
    # 3. –î–û–ë–ê–í–õ–Ø–ï–ú –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ö–õ–ê–°–°–ê–ú–ò
    print_color(Colors.BLUE, "\n3. –ò–ï–†–ê–†–•–ò–Ø –ö–õ–ê–°–°–û–í:")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤—è–∑–∏
    parent_relations = [
        ("–ú–õ–ï–ö–û–ü–ò–¢–ê–Æ–©–ï–ï", "–ñ–ò–í–û–¢–ù–û–ï"),
        ("–ü–¢–ò–¶–ê", "–ñ–ò–í–û–¢–ù–û–ï"), 
        ("–ß–ï–õ–û–í–ï–ö", "–ú–õ–ï–ö–û–ü–ò–¢–ê–Æ–©–ï–ï"),
        ("–°–û–ë–ê–ö–ê", "–ú–õ–ï–ö–û–ü–ò–¢–ê–Æ–©–ï–ï")
    ]
    
    for child_key, parent_key in parent_relations:
        if child_key in uris and parent_key in uris:
            data = {"parent_uri": uris[parent_key]}
            response, success = test_endpoint("POST", f"{BASE_URL}/classes/{uris[child_key]}/add-parent/", data)
    
    # 4. –î–û–ë–ê–í–õ–Ø–ï–ú DATATYPE PROPERTIES
    print_color(Colors.BLUE, "\n4. DATATYPE PROPERTIES:")
    
    attributes_to_create = [
        ("–ñ–ò–í–û–¢–ù–û–ï", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–æ–≥"),
        ("–ñ–ò–í–û–¢–ù–û–ï", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∂–∏–∑–Ω–∏"),
        ("–ü–¢–ò–¶–ê", "—Ä–∞–∑–º–∞—Ö_–∫—Ä—ã–ª—å–µ–≤"),
        ("–°–û–ë–ê–ö–ê", "–ø–æ—Ä–æ–¥–∞"),
        ("–ß–ï–õ–û–í–ï–ö", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
    ]
    
    for class_key, attr_name in attributes_to_create:
        if class_key in uris:
            data = {"datatype_title": attr_name}
            response, success = test_endpoint("POST", f"{BASE_URL}/classes/{uris[class_key]}/attributes/", data, 201)
            if success and response and 'uri' in response:
                print_color(Colors.GREEN, f"   üìù {attr_name} -> {response['uri']}")
    
    # 5. –î–û–ë–ê–í–õ–Ø–ï–ú OBJECT PROPERTIES
    print_color(Colors.BLUE, "\n5. OBJECT PROPERTIES:")
    
    object_attributes_to_create = [
        ("–ñ–ò–í–û–¢–ù–û–ï", "–∏–º–µ–µ—Ç_—Ä–æ–¥–∏—Ç–µ–ª—è", "–ñ–ò–í–û–¢–ù–û–ï"),
        ("–ñ–ò–í–û–¢–ù–û–ï", "–∂–∏–≤–µ—Ç_–≤", "–°–†–ï–î–ê_–û–ë–ò–¢–ê–ù–ò–Ø"),
        ("–°–û–ë–ê–ö–ê", "–¥—Ä–µ—Å—Å–∏—Ä—É–µ—Ç—Å—è_—É", "–ß–ï–õ–û–í–ï–ö")
    ]
    
    for class_key, attr_name, range_key in object_attributes_to_create:
        if class_key in uris and range_key in uris:
            data = {
                "attr_name": attr_name,
                "range_uri": uris[range_key]
            }
            response, success = test_endpoint("POST", f"{BASE_URL}/classes/{uris[class_key]}/object-attributes/", data, 201)
            if success and response and 'uri' in response:
                print_color(Colors.GREEN, f"   üîó {attr_name} -> {response['uri']}")
    
    # 6. –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–õ–ê–°–°–ê–•
    print_color(Colors.BLUE, "\n6. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ê–°–°–ê–•:")
    
    for class_key in ["–°–û–ë–ê–ö–ê", "–ñ–ò–í–û–¢–ù–û–ï"]:
        if class_key in uris:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
            response, success = test_endpoint("GET", f"{BASE_URL}/classes/{uris[class_key]}/")
            if success:
                print_color(Colors.GREEN, f"   ‚ÑπÔ∏è  {class_key}: {response.get('title')}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
            response, success = test_endpoint("GET", f"{BASE_URL}/classes/{uris[class_key]}/signature/")
            if success:
                datatype_props = [p['title'] for p in response.get('params', [])]
                object_props = [p['title'] for p in response.get('obj_params', [])]
                print_color(Colors.GREEN, f"   üìã {class_key} —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: {len(datatype_props)} datatype, {len(object_props)} object")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            response, success = test_endpoint("GET", f"{BASE_URL}/classes/{uris[class_key]}/parents/")
            if success:
                parents_count = len(response.get('parents', []))
                print_color(Colors.GREEN, f"   üë™ {class_key} —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {parents_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π
            response, success = test_endpoint("GET", f"{BASE_URL}/classes/{uris[class_key]}/children/")
            if success:
                children_count = len(response.get('children', []))
                print_color(Colors.GREEN, f"   üë∂ {class_key} –¥–µ—Ç–µ–π: {children_count}")
    
    # 7. –°–û–ó–î–ê–ï–ú –û–ë–™–ï–ö–¢–´
    print_color(Colors.BLUE, "\n7. –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í:")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—ã –æ–±–∏—Ç–∞–Ω–∏—è
    habitats = [
        {"uri": uris["–°–†–ï–î–ê_–û–ë–ò–¢–ê–ù–ò–Ø"], "title": "–î–æ–º", "description": "–î–æ–º –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"},
        {"uri": uris["–°–†–ï–î–ê_–û–ë–ò–¢–ê–ù–ò–Ø"], "title": "–ë—É–¥–∫–∞", "description": "–ë—É–¥–∫–∞ –¥–ª—è —Å–æ–±–∞–∫–∏"}
    ]
    
    for habitat in habitats:
        data = {
            "uri": habitat["uri"],
            "title": habitat["title"],
            "description": habitat["description"]
        }
        response, success = test_endpoint("POST", f"{BASE_URL}/objects/", data, 201)
        if success and response and 'uri' in response:
            uris[habitat['title'].upper()] = response['uri']
            print_color(Colors.GREEN, f"   üè† {habitat['title']}: {response['uri']}")
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
    human_data = {
        "uri": uris["–ß–ï–õ–û–í–ï–ö"],
        "title": "–ú–∞—Ç–≤–µ–π",
        "description": "–ß–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä—ã–π –¥—Ä–µ—Å—Å–∏—Ä—É–µ—Ç —Å–æ–±–∞–∫",
        "properties": {"–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∂–∏–∑–Ω–∏": 80},
        "object_properties": {"–∂–∏–≤–µ—Ç_–≤": uris["–î–û–ú"]}
    }
    response, success = test_endpoint("POST", f"{BASE_URL}/objects/", human_data, 201)
    if success and response and 'uri' in response:
        uris['MATVEY'] = response['uri']
        print_color(Colors.GREEN, f"   üë® –ú–∞—Ç–≤–µ–π: {response['uri']}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±–∞–∫—É
    dog_data = {
        "uri": uris["–°–û–ë–ê–ö–ê"],
        "title": "–†–µ–∫—Å", 
        "description": "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è —Å–æ–±–∞–∫–∞ –ø–æ—Ä–æ–¥—ã –æ–≤—á–∞—Ä–∫–∞",
        "properties": {"–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∂–∏–∑–Ω–∏": 18},
        "object_properties": {
            "–∂–∏–≤–µ—Ç_–≤": uris["–ë–£–î–ö–ê"],
            "–¥—Ä–µ—Å—Å–∏—Ä—É–µ—Ç—Å—è_—É": uris["MATVEY"]
        }
    }
    response, success = test_endpoint("POST", f"{BASE_URL}/objects/", dog_data, 201)
    if success and response and 'uri' in response:
        uris['REX'] = response['uri']
        print_color(Colors.GREEN, f"   üê∂ –†–µ–∫—Å: {response['uri']}")
    
    # 8. –¢–ï–°–¢–ò–†–£–ï–ú –û–ë–™–ï–ö–¢–´
    print_color(Colors.BLUE, "\n8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í:")
    
    for obj_key in ["REX", "MATVEY"]:
        if obj_key in uris:
            response, success = test_endpoint("GET", f"{BASE_URL}/objects/{uris[obj_key]}/")
            if success:
                print_color(Colors.GREEN, f"   üì¶ {obj_key}: {response.get('title')} - {response.get('description')}")
    
    # 9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    print_color(Colors.BLUE, "\n9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –æ–Ω—Ç–æ–ª–æ–≥–∏—é
    response, success = test_endpoint("GET", f"{BASE_URL}/ontology/")
    if success and response:
        signatures_count = len(response.get('signatures', []))
        objects_count = len(response.get('objects', []))
        print_color(Colors.GREEN, f"   üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ–Ω—Ç–æ–ª–æ–≥–∏—è: {signatures_count} —Å–∏–≥–Ω–∞—Ç—É—Ä, {objects_count} –æ–±—ä–µ–∫—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URI –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    with open('test_uris.json', 'w') as f:
        json.dump(uris, f, indent=2)
    
    print_color(Colors.GREEN, "\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print_color(Colors.YELLOW, "üìÅ URI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_uris.json")

if __name__ == "__main__":
    main()